(()=>{"use strict";var n={426:(n,r,e)=>{e.d(r,{Z:()=>u});var a=e(537),t=e.n(a),i=e(645),o=e.n(i),s=e(667),l=e.n(s),d=new URL(e(7),e.b),c=o()(t()),A=l()(d);c.push([n.id,"\r\nbody {\r\n    height: 100vh;\r\n    /* background-image: linear-gradient(rgba(5, 5, 5, 0.5), rgba(5, 5, 5, 0.5)), url(aurora-borealis.jpg); */\r\n    background-image: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.4)), url("+A+');\r\n    /* background-image: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(sunrise.jpg); */\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n\r\n* {\r\n    color: white;\r\n}\r\n\r\n.form-control::placeholder {\r\n    color: white;\r\n}\r\n\r\n.selected {\r\n    color: blue;\r\n}\r\n\r\n.celcius, .fahrenheit {\r\n    cursor: pointer;\r\n}\r\n\r\n/* ---------------------------------Loading Component----------------------------------------------------------- */\r\n#overlay {\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: none;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0,0,0,0.5);\r\n}\r\n\r\n.lds-spinner {\r\n    color: official;\r\n    display: none;\r\n    /* display: inline-block; */\r\n    position: absolute;\r\n    width: 80px;\r\n    height: 80px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%)\r\n}\r\n.lds-spinner div {\r\n    transform-origin: 40px 40px;\r\n    animation: lds-spinner 1.2s linear infinite;\r\n}\r\n.lds-spinner div:after {\r\n    content: " ";\r\n    display: block;\r\n    position: absolute;\r\n    top: 3px;\r\n    left: 37px;\r\n    width: 6px;\r\n    height: 18px;\r\n    border-radius: 20%;\r\n    background: #fff;\r\n}\r\n.lds-spinner div:nth-child(1) {\r\n    transform: rotate(0deg);\r\n    animation-delay: -1.1s;\r\n}\r\n.lds-spinner div:nth-child(2) {\r\n    transform: rotate(30deg);\r\n    animation-delay: -1s;\r\n}\r\n.lds-spinner div:nth-child(3) {\r\n    transform: rotate(60deg);\r\n    animation-delay: -0.9s;\r\n}\r\n.lds-spinner div:nth-child(4) {\r\n    transform: rotate(90deg);\r\n    animation-delay: -0.8s;\r\n}\r\n.lds-spinner div:nth-child(5) {\r\n    transform: rotate(120deg);\r\n    animation-delay: -0.7s;\r\n}\r\n.lds-spinner div:nth-child(6) {\r\n    transform: rotate(150deg);\r\n    animation-delay: -0.6s;\r\n}\r\n.lds-spinner div:nth-child(7) {\r\n    transform: rotate(180deg);\r\n    animation-delay: -0.5s;\r\n}\r\n.lds-spinner div:nth-child(8) {\r\n    transform: rotate(210deg);\r\n    animation-delay: -0.4s;\r\n}\r\n.lds-spinner div:nth-child(9) {\r\n    transform: rotate(240deg);\r\n    animation-delay: -0.3s;\r\n}\r\n.lds-spinner div:nth-child(10) {\r\n    transform: rotate(270deg);\r\n    animation-delay: -0.2s;\r\n}\r\n.lds-spinner div:nth-child(11) {\r\n    transform: rotate(300deg);\r\n    animation-delay: -0.1s;\r\n}\r\n.lds-spinner div:nth-child(12) {\r\n    transform: rotate(330deg);\r\n    animation-delay: 0s;\r\n}\r\n@keyframes lds-spinner {\r\n    0% {\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        opacity: 0;\r\n    }\r\n}\r\n  \r\n\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,yGAAyG;IACzG,kHAA+G;IAC/G,iGAAiG;IACjG,sBAAsB;IACtB,2BAA2B;IAC3B,4BAA4B;AAChC;;;AAGA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA,kHAAkH;AAClH;IACI,eAAe;IACf,WAAW;IACX,YAAY;IACZ,aAAa;IACb,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,iCAAiC;AACrC;;AAEA;IACI,eAAe;IACf,aAAa;IACb,2BAA2B;IAC3B,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,SAAS;IACT;AACJ;AACA;IACI,2BAA2B;IAC3B,2CAA2C;AAC/C;AACA;IACI,YAAY;IACZ,cAAc;IACd,kBAAkB;IAClB,QAAQ;IACR,UAAU;IACV,UAAU;IACV,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;AACpB;AACA;IACI,uBAAuB;IACvB,sBAAsB;AAC1B;AACA;IACI,wBAAwB;IACxB,oBAAoB;AACxB;AACA;IACI,wBAAwB;IACxB,sBAAsB;AAC1B;AACA;IACI,wBAAwB;IACxB,sBAAsB;AAC1B;AACA;IACI,yBAAyB;IACzB,sBAAsB;AAC1B;AACA;IACI,yBAAyB;IACzB,sBAAsB;AAC1B;AACA;IACI,yBAAyB;IACzB,sBAAsB;AAC1B;AACA;IACI,yBAAyB;IACzB,sBAAsB;AAC1B;AACA;IACI,yBAAyB;IACzB,sBAAsB;AAC1B;AACA;IACI,yBAAyB;IACzB,sBAAsB;AAC1B;AACA;IACI,yBAAyB;IACzB,sBAAsB;AAC1B;AACA;IACI,yBAAyB;IACzB,mBAAmB;AACvB;AACA;IACI;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;AACJ",sourcesContent:['\r\nbody {\r\n    height: 100vh;\r\n    /* background-image: linear-gradient(rgba(5, 5, 5, 0.5), rgba(5, 5, 5, 0.5)), url(aurora-borealis.jpg); */\r\n    background-image: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.4)), url(pexels-josh-sorenson-386148.jpg);\r\n    /* background-image: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(sunrise.jpg); */\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n\r\n* {\r\n    color: white;\r\n}\r\n\r\n.form-control::placeholder {\r\n    color: white;\r\n}\r\n\r\n.selected {\r\n    color: blue;\r\n}\r\n\r\n.celcius, .fahrenheit {\r\n    cursor: pointer;\r\n}\r\n\r\n/* ---------------------------------Loading Component----------------------------------------------------------- */\r\n#overlay {\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: none;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0,0,0,0.5);\r\n}\r\n\r\n.lds-spinner {\r\n    color: official;\r\n    display: none;\r\n    /* display: inline-block; */\r\n    position: absolute;\r\n    width: 80px;\r\n    height: 80px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%)\r\n}\r\n.lds-spinner div {\r\n    transform-origin: 40px 40px;\r\n    animation: lds-spinner 1.2s linear infinite;\r\n}\r\n.lds-spinner div:after {\r\n    content: " ";\r\n    display: block;\r\n    position: absolute;\r\n    top: 3px;\r\n    left: 37px;\r\n    width: 6px;\r\n    height: 18px;\r\n    border-radius: 20%;\r\n    background: #fff;\r\n}\r\n.lds-spinner div:nth-child(1) {\r\n    transform: rotate(0deg);\r\n    animation-delay: -1.1s;\r\n}\r\n.lds-spinner div:nth-child(2) {\r\n    transform: rotate(30deg);\r\n    animation-delay: -1s;\r\n}\r\n.lds-spinner div:nth-child(3) {\r\n    transform: rotate(60deg);\r\n    animation-delay: -0.9s;\r\n}\r\n.lds-spinner div:nth-child(4) {\r\n    transform: rotate(90deg);\r\n    animation-delay: -0.8s;\r\n}\r\n.lds-spinner div:nth-child(5) {\r\n    transform: rotate(120deg);\r\n    animation-delay: -0.7s;\r\n}\r\n.lds-spinner div:nth-child(6) {\r\n    transform: rotate(150deg);\r\n    animation-delay: -0.6s;\r\n}\r\n.lds-spinner div:nth-child(7) {\r\n    transform: rotate(180deg);\r\n    animation-delay: -0.5s;\r\n}\r\n.lds-spinner div:nth-child(8) {\r\n    transform: rotate(210deg);\r\n    animation-delay: -0.4s;\r\n}\r\n.lds-spinner div:nth-child(9) {\r\n    transform: rotate(240deg);\r\n    animation-delay: -0.3s;\r\n}\r\n.lds-spinner div:nth-child(10) {\r\n    transform: rotate(270deg);\r\n    animation-delay: -0.2s;\r\n}\r\n.lds-spinner div:nth-child(11) {\r\n    transform: rotate(300deg);\r\n    animation-delay: -0.1s;\r\n}\r\n.lds-spinner div:nth-child(12) {\r\n    transform: rotate(330deg);\r\n    animation-delay: 0s;\r\n}\r\n@keyframes lds-spinner {\r\n    0% {\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        opacity: 0;\r\n    }\r\n}\r\n  \r\n\r\n'],sourceRoot:""}]);const u=c},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",a=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),a&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),a&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,a,t,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);a&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),t&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=t):c[4]="".concat(t)),r.push(c))}},r}},667:n=>{n.exports=function(n,r){return r||(r={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),r.hash&&(n+=r.hash),/["'() \t\n]|(%20)/.test(n)||r.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),t="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(t," */");return[r].concat([i]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,a=0;a<r.length;a++)if(r[a].identifier===n){e=a;break}return e}function a(n,a){for(var i={},o=[],s=0;s<n.length;s++){var l=n[s],d=a.base?l[0]+a.base:l[0],c=i[d]||0,A="".concat(d," ").concat(c);i[d]=c+1;var u=e(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)r[u].references++,r[u].updater(p);else{var m=t(p,a);a.byIndex=s,r.splice(s,0,{identifier:A,updater:m,references:1})}o.push(A)}return o}function t(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,t){var i=a(n=n||[],t=t||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=e(i[o]);r[s].references--}for(var l=a(n,t),d=0;d<i.length;d++){var c=e(i[d]);0===r[c].references&&(r[c].updater(),r.splice(c,1))}i=l}}},569:n=>{var r={};n.exports=function(n,e){var a=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var a="";e.supports&&(a+="@supports (".concat(e.supports,") {")),e.media&&(a+="@media ".concat(e.media," {"));var t=void 0!==e.layer;t&&(a+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),a+=e.css,t&&(a+="}"),e.media&&(a+="}"),e.supports&&(a+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(a,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},7:(n,r,e)=>{n.exports=e.p+"880381514b26fcd95d5e.jpg"}},r={};function e(a){var t=r[a];if(void 0!==t)return t.exports;var i=r[a]={id:a,exports:{}};return n[a](i,i.exports,e),i.exports}e.m=n,e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var a in r)e.o(r,a)&&!e.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:r[a]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var r=e.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var a=r.getElementsByTagName("script");a.length&&(n=a[a.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{function n(n,r){if(r.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+r.length+" present")}function r(n){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},r(n)}function a(e){n(1,arguments);var a=Object.prototype.toString.call(e);return e instanceof Date||"object"===r(e)&&"[object Date]"===a?new Date(e.getTime()):"number"==typeof e||"[object Number]"===a?new Date(e):("string"!=typeof e&&"[object String]"!==a||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function t(n){if(null===n||!0===n||!1===n)return NaN;var r=Number(n);return isNaN(r)?r:r<0?Math.ceil(r):Math.floor(r)}var i=e(379),o=e.n(i),s=e(795),l=e.n(s),d=e(569),c=e.n(d),A=e(565),u=e.n(A),p=e(216),m=e.n(p),h=e(589),f=e.n(h),g=e(426),y={};y.styleTagTransform=f(),y.setAttributes=u(),y.insert=c().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=m(),o()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals;const C={AF:"Afghanistan",AX:"Aland Islands",AL:"Albania",DZ:"Algeria",AS:"American Samoa",AD:"Andorra",AO:"Angola",AI:"Anguilla",AQ:"Antarctica",AG:"Antigua And Barbuda",AR:"Argentina",AM:"Armenia",AW:"Aruba",AU:"Australia",AT:"Austria",AZ:"Azerbaijan",BS:"Bahamas",BH:"Bahrain",BD:"Bangladesh",BB:"Barbados",BY:"Belarus",BE:"Belgium",BZ:"Belize",BJ:"Benin",BM:"Bermuda",BT:"Bhutan",BO:"Bolivia",BA:"Bosnia And Herzegovina",BW:"Botswana",BV:"Bouvet Island",BR:"Brazil",IO:"British Indian Ocean Territory",BN:"Brunei Darussalam",BG:"Bulgaria",BF:"Burkina Faso",BI:"Burundi",KH:"Cambodia",CM:"Cameroon",CA:"Canada",CV:"Cape Verde",KY:"Cayman Islands",CF:"Central African Republic",TD:"Chad",CL:"Chile",CN:"China",CX:"Christmas Island",CC:"Cocos (Keeling) Islands",CO:"Colombia",KM:"Comoros",CG:"Congo",CD:"Congo, Democratic Republic",CK:"Cook Islands",CR:"Costa Rica",CI:"Cote D'Ivoire",HR:"Croatia",CU:"Cuba",CY:"Cyprus",CZ:"Czech Republic",DK:"Denmark",DJ:"Djibouti",DM:"Dominica",DO:"Dominican Republic",EC:"Ecuador",EG:"Egypt",SV:"El Salvador",GQ:"Equatorial Guinea",ER:"Eritrea",EE:"Estonia",ET:"Ethiopia",FK:"Falkland Islands (Malvinas)",FO:"Faroe Islands",FJ:"Fiji",FI:"Finland",FR:"France",GF:"French Guiana",PF:"French Polynesia",TF:"French Southern Territories",GA:"Gabon",GM:"Gambia",GE:"Georgia",DE:"Germany",GH:"Ghana",GI:"Gibraltar",GR:"Greece",GL:"Greenland",GD:"Grenada",GP:"Guadeloupe",GU:"Guam",GT:"Guatemala",GG:"Guernsey",GN:"Guinea",GW:"Guinea-Bissau",GY:"Guyana",HT:"Haiti",HM:"Heard Island & Mcdonald Islands",VA:"Holy See (Vatican City State)",HN:"Honduras",HK:"Hong Kong",HU:"Hungary",IS:"Iceland",IN:"India",ID:"Indonesia",IR:"Iran, Islamic Republic Of",IQ:"Iraq",IE:"Ireland",IM:"Isle Of Man",IL:"Israel",IT:"Italy",JM:"Jamaica",JP:"Japan",JE:"Jersey",JO:"Jordan",KZ:"Kazakhstan",KE:"Kenya",KI:"Kiribati",KR:"Korea",KW:"Kuwait",KG:"Kyrgyzstan",LA:"Lao People's Democratic Republic",LV:"Latvia",LB:"Lebanon",LS:"Lesotho",LR:"Liberia",LY:"Libyan Arab Jamahiriya",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",MO:"Macao",MK:"Macedonia",MG:"Madagascar",MW:"Malawi",MY:"Malaysia",MV:"Maldives",ML:"Mali",MT:"Malta",MH:"Marshall Islands",MQ:"Martinique",MR:"Mauritania",MU:"Mauritius",YT:"Mayotte",MX:"Mexico",FM:"Micronesia, Federated States Of",MD:"Moldova",MC:"Monaco",MN:"Mongolia",ME:"Montenegro",MS:"Montserrat",MA:"Morocco",MZ:"Mozambique",MM:"Myanmar",NA:"Namibia",NR:"Nauru",NP:"Nepal",NL:"Netherlands",AN:"Netherlands Antilles",NC:"New Caledonia",NZ:"New Zealand",NI:"Nicaragua",NE:"Niger",NG:"Nigeria",NU:"Niue",NF:"Norfolk Island",MP:"Northern Mariana Islands",NO:"Norway",OM:"Oman",PK:"Pakistan",PW:"Palau",PS:"Palestinian Territory, Occupied",PA:"Panama",PG:"Papua New Guinea",PY:"Paraguay",PE:"Peru",PH:"Philippines",PN:"Pitcairn",PL:"Poland",PT:"Portugal",PR:"Puerto Rico",QA:"Qatar",RE:"Reunion",RO:"Romania",RU:"Russian Federation",RW:"Rwanda",BL:"Saint Barthelemy",SH:"Saint Helena",KN:"Saint Kitts And Nevis",LC:"Saint Lucia",MF:"Saint Martin",PM:"Saint Pierre And Miquelon",VC:"Saint Vincent And Grenadines",WS:"Samoa",SM:"San Marino",ST:"Sao Tome And Principe",SA:"Saudi Arabia",SN:"Senegal",RS:"Serbia",SC:"Seychelles",SL:"Sierra Leone",SG:"Singapore",SK:"Slovakia",SI:"Slovenia",SB:"Solomon Islands",SO:"Somalia",ZA:"South Africa",GS:"South Georgia And Sandwich Isl.",ES:"Spain",LK:"Sri Lanka",SD:"Sudan",SR:"Suriname",SJ:"Svalbard And Jan Mayen",SZ:"Swaziland",SE:"Sweden",CH:"Switzerland",SY:"Syrian Arab Republic",TW:"Taiwan",TJ:"Tajikistan",TZ:"Tanzania",TH:"Thailand",TL:"Timor-Leste",TG:"Togo",TK:"Tokelau",TO:"Tonga",TT:"Trinidad And Tobago",TN:"Tunisia",TR:"Turkey",TM:"Turkmenistan",TC:"Turks And Caicos Islands",TV:"Tuvalu",UG:"Uganda",UA:"Ukraine",AE:"United Arab Emirates",GB:"United Kingdom",US:"United States",UM:"United States Outlying Islands",UY:"Uruguay",UZ:"Uzbekistan",VU:"Vanuatu",VE:"Venezuela",VN:"Viet Nam",VG:"Virgin Islands, British",VI:"Virgin Islands, U.S.",WF:"Wallis And Futuna",EH:"Western Sahara",YE:"Yemen",ZM:"Zambia",ZW:"Zimbabwe"};function b(){return{weatherType:document.querySelector(".weatherType"),location:document.querySelector(".location"),timeDate:document.querySelector(".timeDate"),searchInput:document.querySelector("input"),celcius:document.querySelectorAll(".celcius"),fahrenheit:document.querySelectorAll(".fahrenheit"),temp:document.querySelector(".temp"),min:document.querySelector(".min"),max:document.querySelector(".max"),feelsLike:document.querySelector(".feelsLike"),windSpeed:document.querySelector(".windSpeed"),humidity:document.querySelector(".humidity"),pressure:document.querySelector(".pressure"),searchBtn:document.querySelector(".searchBtn"),loading:document.querySelector(".lds-spinner"),overlay:document.querySelector("#overlay")}}let I,B;window.onload=function(){b().searchInput.value="London",b().searchBtn.click(),b().celcius.forEach((n=>n.classList.add("selected"))),b().searchInput.value=""},b().searchBtn.addEventListener("click",(async r=>{const e=b().searchInput.value,i=await async function(n){b().overlay.style.display="block",b().loading.style.display="inline-block";const r=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${n}&appid=01c4921ec264bb0180d423464076aedb&units=metric`,{mode:"cors"}),e=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${n}&appid=01c4921ec264bb0180d423464076aedb&units=imperial`,{mode:"cors"}),a=await r.json(),t=await e.json();return console.log("F",t),console.log("C",a),{result:a,result2:t}}(e);I={...i.result},B={...i.result2},b().celcius.forEach((n=>n.click())),b().loading.style.display="none",b().overlay.style.display="none",b().weatherType.textContent=i.result.weather[0].description.split(" ").map((n=>n.charAt(0).toUpperCase()+n.substring(1))).join(" ");const o=i.result.sys.country;b().location.innerHTML=`${i.result.name}, ${C[o]}`,b().timeDate.innerHTML=`${function(r,e,i="full"){const o=function(r){return n(1,arguments),a(1e3*t(r))}(r+e).toUTCString();let s=o.slice(0,3),l=o.slice(5,7);const d=o.slice(8,11),c=o.slice(14,16);let A;return l<10&&(l=l.slice(1)),A="1"===l.slice(-1)?"st":"2"===l.slice(-1)?"nd":"3"===l.slice(-1)?"rd":"th",l>3&&l<21&&(A="th"),"Mon"===s?s="Monday":"Tue"===s?s="Tuesday":"Wed"===s?s="Wednesday":"Thu"===s?s="Thursday":"Fri"===s?s="Friday":"Sat"===s?s="Saturday":"Sun"===s&&(s="Sunday"),"day"===i?s:`${s}, ${l}${A} ${d} '${c}`}(i.result.dt,i.result.timezone)}`,b().temp.innerHTML=`${Math.round(i.result.main.temp).toString()}&#x2103`,b().min.innerHTML=`Min Temp:<br>${Math.round(i.result.main.temp_min).toString()}&#x2103`,b().max.innerHTML=`Max Temp:<br>${Math.round(i.result.main.temp_max).toString()}&#x2103`,b().feelsLike.innerHTML=`Feels Like:<br>${Math.round(i.result.main.feels_like).toString()}&#x2103`,b().humidity.innerHTML=`Humidity:<br>${Math.round(i.result.main.humidity).toString()}%`,b().windSpeed.innerHTML=`Wind Speed:<br>${i.result2.wind.speed.toFixed(1).toString()}km/h`,b().pressure.innerHTML=`Pressure:<br>${(i.result.main.pressure/10).toFixed(1).toString()} kPa`})),window.addEventListener("click",(n=>{"Enter"==n.code&&b().searchBtn.click()})),b().celcius.forEach((n=>{n.addEventListener("click",(async n=>{b().celcius.forEach((n=>n.classList.add("selected"))),b().fahrenheit.forEach((n=>n.classList.remove("selected"))),console.log(I),b().temp.innerHTML=await(`${Math.round(I.main.temp).toString()}&#x2103`),b().min.innerHTML=`Min Temp:<br>${Math.round(I.main.temp_min).toString()}&#x2103`,b().max.innerHTML=`Max Temp:<br>${Math.round(I.main.temp_max).toString()}&#x2103`,b().feelsLike.innerHTML=`Feels Like:<br>${Math.round(I.main.feels_like).toString()}&#x2103`}))})),b().fahrenheit.forEach((n=>{n.addEventListener("click",(n=>{b().celcius.forEach((n=>n.classList.remove("selected"))),b().fahrenheit.forEach((n=>n.classList.add("selected"))),b().temp.innerHTML=`${Math.round(B.main.temp).toString()}&#x2109;`,b().min.innerHTML=`Min Temp:<br>${Math.round(B.main.temp_min).toString()}&#x2109;`,b().max.innerHTML=`Max Temp:<br>${Math.round(B.main.temp_max).toString()}&#x2109;`,b().feelsLike.innerHTML=`Feels Like:<br>${Math.round(B.main.feels_like).toString()}&#x2109;`}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,